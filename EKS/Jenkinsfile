pipeline {
    agent {
        label 'docker'
    }
    tools {
        maven 'maven3'
        jdk 'jdk17'
        nodejs 'node16'
    }
    parameters {
        choice(name: 'OWASP_ZAP_SCAN_TYPE', choices: ['BASELINE', 'API', 'FULL'], 
               description: 'Select the OWASP ZAP scan type')

        string(name: 'ZAP_TARGET_URL', defaultValue: 'https://www.example.com', description: 'Enter the URL of the application to scan')
    }
    environment {
        SCANNER_HOME = tool 'sonarqube-scanner'
        ECR_URL = '711063385483.dkr.ecr.us-east-1.amazonaws.com'
        NAME = '711063385483.dkr.ecr.us-east-1.amazonaws.com/petclinicapp'
        BUILD_NUMBER = "${env.BUILD_NUMBER}"
        DEPENDENCY_CHECK_API_KEY = credentials('DP-key')
        def commitId = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        def imageTag = "${commitId}-${BUILD_NUMBER}"
        GIT_COMMIT = "${commitId}"
        IMAGE_NAME = "${NAME}:${imageTag}"
        AWS_REGION = 'us-east-1'
    }
    
    stages {
        stage('Maven Unit Test') {
            steps {
                sh "mvn clean test"
            }
        }

        stage('Maven Install') {
            steps {
                sh "mvn clean install"
            }
        }

        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Petclinic-App \
                        -Dsonar.java.binaries=. \
                        -Dsonar.projectKey=Petclinic 
                    '''
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 10, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Pipeline aborted due to quality gate failure: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('OWASP Dependency Check') { 
            steps { 
                script { 
                    timeout(time: 60, unit: 'MINUTES') { 
                        dependencyCheck additionalArguments: '--scan ./ --nvdApiKey $DEPENDENCY_CHECK_API_KEY', odcInstallation: 'DP' 
                        dependencyCheckPublisher failedTotalCritical: 0, 
                                                failedTotalHigh: 0, 
                                                pattern: 'dependency-check-report.xml', 
                                                stopBuild: true, 
                                                unstableTotalCritical: 0, 
                                                unstableTotalHigh: 0 
                    } 
                } 
            } 
        }

        stage('Build Test') {
            steps {
                script {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Creating Docker File') {
            steps {
                script {
                    writeFile file: 'Dockerfile', text: '''
FROM tomcat:9.0-jdk17
RUN groupadd -r appgroup && useradd -r -g appgroup -m -d /app appuser
RUN chown -R appuser:appgroup /usr/local/tomcat
WORKDIR /app
COPY .mvn/ .mvn
COPY mvnw pom.xml ./
RUN chmod +x mvnw
USER appuser
COPY src ./src
EXPOSE 8080
CMD ["./mvnw", "jetty:run-war"]
                    '''
                    sh 'cat Dockerfile'
                }
            }
        }

        stage('Hadolint Intilize') {
            steps {
                container('docker') {
                    script {
                        sh 'docker run --rm -i hadolint/hadolint < Dockerfile > hadolint_report.txt'
                        def reportFile = 'hadolint_report.txt'
                        def reportContent = readFile(reportFile).trim()
                        if (reportContent.isEmpty()) {
                            sh 'echo "No issues found in Dockerfile." > hadolint_report.txt'
                        }
                    }
                }
            }
        }
        stage('Archive HadoLint Results') {
            steps {
                script {
                    archiveArtifacts artifacts: 'hadolint_report.txt', allowEmptyArchive: false
                }
            }
        }

        stage('Building Docker Image') {
            steps {
                container('docker') {
                    script {
                        sh "docker build -t ${IMAGE_NAME} ."
                    }
                }
            }
        }

        stage('Run Docker Image with Trivy') {
            steps {
                container('docker') {
                    script {
                        retry(30) {
                        try {
                            sh "docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -i aquasec/trivy:0.56.2 image ${IMAGE_NAME} > trivy_report.json"
                        } catch (Exception e) {
                            echo "Trivy scan failed: ${e.message}"
                            sleep 3
                            throw e
                            }
                        }
                    }
                }
            }
        }
        stage('Archive Trivy Scan Report') {
            steps {
                archiveArtifacts artifacts: 'trivy_report.json', allowEmptyArchive: false
            }
        }

        stage('OWASP ZAP Scan') {
            steps {
                container('docker') {
                    catchError(buildResult: 'SUCCESS', stageResult: 'UNSTABLE') {
                        script {
                            echo "The OWASP ZAP Scan Type is ${params.OWASP_ZAP_SCAN_TYPE}"
                            def zapScanScript = ''
                            def zapTargetUrl = params.ZAP_TARGET_URL
                            if (params.OWASP_ZAP_SCAN_TYPE == 'BASELINE') {
                                zapScanScript = 'zap-baseline.py'
                            } else if (params.OWASP_ZAP_SCAN_TYPE == 'API') {
                                zapScanScript = 'zap-api-scan.py'
                            } else if (params.OWASP_ZAP_SCAN_TYPE == 'FULL') {
                                zapScanScript = 'zap-full-scan.py'
                            }
                            def zapReportFile = "${params.OWASP_ZAP_SCAN_TYPE}_Owasp_Zap_report.html"
                            def cmd = "docker run -t ghcr.io/zaproxy/zaproxy:stable ${zapScanScript} -t ${zapTargetUrl} > ${zapReportFile}"

                            echo "Running OWASP ZAP scan with command: ${cmd}"
                            def status = sh(script: cmd, returnStatus: true)
                            if (status == 0) {
                                echo "ZAP scan completed successfully."
                            } else {
                                error "ZAP scan failed with status code: ${status}"
                            }
                        }
                    }
                }
            }
        }
        stage('Archive Owasp Zap Report') {
            steps {
                archiveArtifacts artifacts: "${params.OWASP_ZAP_SCAN_TYPE}_Owasp_Zap_report.html", allowEmptyArchive: false
            }
        }
        stage('Push Docker Image to ECR') {
            steps {
                container('docker') {
                    script {
                        withCredentials([aws(credentialsId: 'aws-cred', region: AWS_REGION)]) {
                            sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_URL}"
                            sh "docker push ${IMAGE_NAME}"
                        }
                    }
                }
            }
        }
        stage('Build Complete') {
            steps {
                echo "Do you want to make the build complete"
                input message: 'Finished checking the build workspace resources? (Click "Proceed" to continue)'
                echo "The build has successfully been completed"
            }
        }
    }

    post {
        success {
            slackSend(
                color: 'good',
                message: "Build ${currentBuild.fullDisplayName} - SUCCESS.\nTriggered by: ${currentBuild.getBuildCauses()[0]?.userId}\nLink: ${env.BUILD_URL}"
            )

            emailext(
                subject: "Jenkins Build: ${currentBuild.fullDisplayName} - ${currentBuild.result}",
                body: """<p>Build Status: ${currentBuild.result}</p>
                        <p>Commit ID: ${env.GIT_COMMIT}</p>
                        <p>Triggered By: ${currentBuild.getBuildCauses()[0]?.userId}</p>
                        <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        <p>Attached Reports:</p>
                        <ul>
                            <li>Hadolint Report: hadolint_report.txt</li>
                            <li>Trivy Report: trivy_report.html</li>
                            <li>OWASP ZAP Report: ${params.OWASP_ZAP_SCAN_TYPE}_Owasp_Zap_report.html</li>
                        </ul>""",
                attachmentsPattern: "hadolint_report.txt, trivy_report.json, ${params.OWASP_ZAP_SCAN_TYPE}_Owasp_Zap_report.html",
                to: 'saiprakash0229@gmail.com'
            )
        }
        failure {
            slackSend(
                color: 'danger',
                message: "Build ${currentBuild.fullDisplayName} - FAILURE.\nTriggered by: ${currentBuild.getBuildCauses()[0]?.userId}\nLink: ${env.BUILD_URL}"
            )
        }
    }
}
